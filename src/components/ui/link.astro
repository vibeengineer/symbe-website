---
import type { LinkStoryblok } from "@storyblok/types";
import { parseLink } from "@/services/storyblok/utils/parse-link";
import type { Prettify } from "@/types";
import { storyblokEditable, type SbBlokData } from "@storyblok/astro";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/utils/cn";
import Label from "./label.astro";

export const linkVariants = cva(
  "font-sans font-medium rounded-full transition-colors duration-200 ease-in-out whitespace-nowrap",
  {
    variants: {
      style: {
        primary:
          "bg-accent-electric/90 hover:bg-accent-electric text-text-000 px-4.5 py-2",
        ghost: "hover:bg-gray-200/10 px-4 py-2",
        default: "hover:underline",
      },
    },
    defaultVariants: {
      style: "default",
    },
  },
);

export type LinkVariants = VariantProps<typeof linkVariants>;

export type Props = {
  blok: Prettify<LinkStoryblok>;
  className?: string;
  textClassName?: string;
};

const {
  blok: { link, linkText, linkStyle = "default" },
  className,
  textClassName,
} = Astro.props;
---

<a
  href={parseLink(link, "href")}
  target={parseLink(link, "target")}
  class={cn(linkVariants({ style: linkStyle }), className)}
  {...storyblokEditable(Astro.props.blok as SbBlokData)}
>
  <Label as="span" size="m" class={textClassName} weight="medium">
    {linkText}
  </Label>
</a>
