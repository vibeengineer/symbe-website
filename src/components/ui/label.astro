---
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/utils/cn";

export const labelVariants = cva("font-sans leading-[1.3] tracking-normal", {
  variants: {
    size: {
      xl: "text-[14px] sm:text-[16px] md:text-[18px] lg:text-[20px] xl:text-[22px] 2xl:text-[24px]",
      l: "text-[12px] sm:text-[14px] md:text-[16px] lg:text-[17px] xl:text-[18px] 2xl:text-[20px]",
      m: "text-[12px] sm:text-[13px] md:text-[14px] lg:text-[15px] xl:text-[16px] 2xl:text-[17px]",
      s: "text-[12px] sm:text-[12px] md:text-[13px] lg:text-[14px] xl:text-[15px] 2xl:text-[16px]",
    },
    weight: {
      semibold: "font-medium",
      regular: "font-normal",
      medium: "font-medium",
      bold: "font-bold",
    },
  },
  compoundVariants: [
    {
      size: "s",
      weight: "semibold",
      class: "uppercase tracking-[0.05em]",
    },
  ],
  defaultVariants: {
    size: "m",
    weight: "regular",
  },
});

export interface Props extends VariantProps<typeof labelVariants> {
  as?: "p" | "span" | "label" | "div" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
  size: NonNullable<VariantProps<typeof labelVariants>["size"]>;
  weight: NonNullable<VariantProps<typeof labelVariants>["weight"]>;
  class?: string;
}

const {
  size: currentSize,
  weight: currentWeight,
  as: Tag,
  class: className,
  ...attrs
} = Astro.props;

const Element = Tag || "span";

const variantClasses = labelVariants({
  size: currentSize,
  weight: currentWeight,
});
const finalClasses = cn(variantClasses, className);
---

<Element class={finalClasses} {...attrs}>
  <slot />
</Element>
