---
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/utils/cn";

export const bodyTextVariants = cva(
  "font-sans font-normal tracking-normal leading-[1.5]", // Base classes for all body text
  {
    variants: {
      size: {
        xl: "text-[16px] sm:text-[18px] md:text-[20px] lg:text-[22px] xl:text-[24px] 2xl:text-[26px]",
        l: "text-[16px] sm:text-[18px] md:text-[20px] lg:text-[21px] xl:text-[22px] 2xl:text-[24px]",
        m: "text-[14px] sm:text-[15px] md:text-[16px] lg:text-[17px] xl:text-[18px] 2xl:text-[19px]",
        s: "text-[12px] sm:text-[13px] md:text-[14px] lg:text-[15px] xl:text-[16px] 2xl:text-[17px]",
      },
    },
    defaultVariants: {
      size: "m",
    },
  },
);

export interface Props extends VariantProps<typeof bodyTextVariants> {
  as?: "p" | "span" | "div" | "label"; // Added label for potential future use
  size: NonNullable<VariantProps<typeof bodyTextVariants>["size"]>; // Make size required
  class?: string; // For additional classes
}

const { size: currentSize, as: Tag, class: className, ...attrs } = Astro.props;

const Element = Tag || "p";

const variantClasses = bodyTextVariants({ size: currentSize });
const finalClasses = cn(variantClasses, className);
---

<Element class={finalClasses} {...attrs}>
  <slot />
</Element>
