---
import type { NavigationStoryblok } from "@storyblok/types";
import Link from "@/components/ui/link.astro";
import type { Prettify } from "@/types";
import { cn } from "@/utils/cn";

interface Props {
  blok: Prettify<NavigationStoryblok>;
  className?: string;
  theme?: "light" | "dark";
}

const {
  blok: { centreLinks, rightLinks },
  className,
  theme = "light",
} = Astro.props as Props;

// Theme-based styling
const themeStyles = {
  toggle: theme === "light" ? "bg-gray-800" : "bg-white",
  drawer:
    theme === "light"
      ? "bg-white/95 text-gray-900"
      : "bg-black/95 text-white backdrop-blur-lg",
  title: theme === "light" ? "text-gray-800" : "text-white",
  border: theme === "light" ? "border-gray-200" : "border-white/10",
  linkHover:
    theme === "light"
      ? "hover:bg-gray-100 transition-colors duration-150"
      : "hover:bg-white/10 transition-colors duration-150",
};
---

<!-- Mobile hamburger toggle -->
<button
  data-mobile-toggle
  class={cn(
    "block md:hidden fixed top-4 right-4 z-[101] p-3 cursor-pointer bg-transparent border-none",
  )}
  aria-label="Toggle navigation"
  aria-expanded="false"
  data-theme={theme}
>
  <span
    class={cn(
      "relative block w-6 h-0.5 transition-transform duration-300",
      theme === "light" ? "bg-gray-800" : "bg-white",
      "[&::before]:content-[''] [&::before]:absolute [&::before]:left-0 [&::before]:w-6 [&::before]:h-0.5 [&::before]:-top-2 [&::before]:transition-transform [&::before]:duration-300",
      "[&::after]:content-[''] [&::after]:absolute [&::after]:left-0 [&::after]:w-6 [&::after]:h-0.5 [&::after]:-bottom-2 [&::after]:transition-transform [&::after]:duration-300",
      theme === "light"
        ? "[&::before]:bg-gray-800 [&::after]:bg-gray-800"
        : "[&::before]:bg-white [&::after]:bg-white",
      "[aria-expanded='true']:bg-transparent",
      "[aria-expanded='true']:[&::before]:translate-y-2 [aria-expanded='true']:[&::before]:rotate-45",
      "[aria-expanded='true']:[&::after]:-translate-y-2 [aria-expanded='true']:[&::after]:-rotate-45",
    )}></span>
</button>

<!-- Mobile drawer -->
<aside
  data-mobile-drawer
  data-theme={theme}
  class={cn(
    "fixed inset-0 w-full h-screen md:hidden",
    themeStyles.drawer,
    "z-[100] invisible opacity-0 translate-y-[-10px]",
    "transition-all duration-300 ease-in-out",
    "[&.open]:visible [&.open]:opacity-100 [&.open]:translate-y-0",
    className,
  )}
  aria-hidden="true"
>
  <div class="flex max-h-screen flex-col gap-6 overflow-y-auto p-6 pt-20">
    {
      centreLinks?.map((item: any) => {
        if (item.component === "link") {
          return (
            <div class={cn("rounded-lg p-2", themeStyles.linkHover)}>
              <Link blok={item} />
            </div>
          );
        }

        if (item.component === "linkDropdown") {
          return (
            <div class={cn("border-b pb-4", themeStyles.border)}>
              <div class={cn("mb-3 font-medium", themeStyles.title)}>
                {item.dropdownTitle}
              </div>
              <div class="flex flex-col gap-2 pl-4">
                {item.links?.map((dropdownLink: any) => (
                  <div class={cn("rounded-lg p-2", themeStyles.linkHover)}>
                    <Link blok={dropdownLink} />
                  </div>
                ))}
              </div>
            </div>
          );
        }
        return null;
      })
    }
    <div class="mt-4 flex flex-col gap-2">
      {
        rightLinks?.map((link: any) => (
          <div class={cn("rounded-lg p-2", themeStyles.linkHover)}>
            <Link blok={link} />
          </div>
        ))
      }
    </div>
  </div>
</aside>
