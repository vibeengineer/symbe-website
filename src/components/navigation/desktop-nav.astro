---
import type { NavigationStoryblok } from "@storyblok/types";
import { storyblokEditable, type SbBlokData } from "@storyblok/astro";
import Link from "@/components/ui/link.astro";
import Media from "@/components/ui/media.astro";
import type { Prettify } from "@/types";
import { cn } from "@/utils/cn";

interface Props {
  className?: string;
  blok: Prettify<NavigationStoryblok>;
  theme?: "light" | "dark";
}

const { blok, className, theme = "light" } = Astro.props as Props;
const { logo, centreLinks, rightLinks } = blok;

// Theme-based styling
const themeStyles = {
  nav:
    theme === "light"
      ? "bg-white/90 text-gray-900"
      : "bg-black/50 text-white backdrop-blur-lg",
  logo: theme === "light" ? "/logo-dark.svg" : "/logo-light.svg", // Fallback if needed
  link:
    theme === "light"
      ? "text-gray-800 hover:text-black"
      : "text-white/90 hover:text-white",
  linkHover:
    theme === "light"
      ? "hover:bg-gray-200/80 transition-colors duration-200"
      : "hover:bg-white/10 transition-colors duration-200",
  dropdown:
    theme === "light"
      ? "border-gray-200 bg-white/95 shadow-lg"
      : "border-white/10 bg-black/90 backdrop-blur-lg",
  dropdownItemHover:
    theme === "light"
      ? "hover:bg-gray-100 transition-colors duration-150"
      : "hover:bg-white/10 transition-colors duration-150",
};
---

<nav
  data-nav="desktop"
  data-theme={theme}
  class={cn(
    "hidden md:flex relative items-center justify-between p-4 md:p-6",
    themeStyles.nav,
    className,
  )}
>
  <!-- Logo -->
  <div class="flex-shrink-0">
    {logo?.filename && <Media asset={logo} width={132} height={45} />}
  </div>

  <!-- Centre links -->
  <div class="absolute left-1/2 flex -translate-x-1/2 items-center gap-6">
    {
      centreLinks?.map((item: any) => {
        if (item.component === "link") {
          return (
            <div
              class={cn(
                "nav-link-item relative rounded-lg px-4 py-2",
                themeStyles.linkHover,
              )}
            >
              <Link blok={item} />
            </div>
          );
        }
        if (item.component === "linkDropdown") {
          return (
            <div class="relative">
              <button
                data-trigger
                class={cn(
                  "relative rounded-lg px-4 py-2 text-[0.9375rem]",
                  "border-none bg-transparent",
                  themeStyles.link,
                  themeStyles.linkHover,
                  "cursor-pointer",
                )}
                aria-expanded="false"
                aria-haspopup="true"
              >
                {item.dropdownTitle}
              </button>
              <div
                data-panel
                class={cn(
                  "absolute top-full left-1/2 mt-2 -translate-x-1/2",
                  "min-w-[220px] px-2 py-2",
                  "rounded-lg border",
                  themeStyles.dropdown,
                  "invisible opacity-0",
                  "origin-top",
                )}
                role="menu"
              >
                <div class="flex flex-col">
                  {item.links?.map((dropdownLink: any) => (
                    <div
                      class={cn(
                        "dropdown-item rounded-md px-3 py-[0.45rem]",
                        themeStyles.dropdownItemHover,
                      )}
                    >
                      <Link blok={dropdownLink} />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          );
        }
        return null;
      })
    }
  </div>

  <!-- Right links -->
  <div class="flex items-center gap-4">
    {
      rightLinks?.map((link: any) => (
        <div
          class={cn(
            "nav-link-item relative rounded-lg px-4 py-2",
            themeStyles.linkHover,
          )}
        >
          <Link blok={link} />
        </div>
      ))
    }
  </div>
</nav>

<style is:global>
  /* Ensure links have proper styling */
  .nav-link-item a,
  .dropdown-item a {
    display: block;
    width: 100%;
  }
</style>
